#####################################################################
# PUMA Azure run.
# Checks out all the various codes (source, config, web), runs the
# pipeline then commits the HTML files back to GitHub to display at
# https://ollybutters.github.io/puma_web/
# Set to run regularly so the citations are updated as mandated by
# Scopus.
#
# TODO: This builds a VM from scratch, so caching is non-existent. This
#       seems a bit wasteful. Maybe I could commit the cache somewhere?
#####################################################################


#########################################################################################
# Need to define all the GH repos and their access tokens, see:
# https://docs.microsoft.com/en-us/azure/devops/pipelines/library/service-endpoints?view=azure-devops&tabs=yaml
resources:
  repositories:
  - repository: puma_configs
    type: github
    endpoint: puma_gh_deployment
    name: OllyButters/puma_configs
    ref: master

  #- repository: puma_web
  #  type: github
  #  endpoint: puma_gh_deployment
  #  name: OllyButters/puma_web
  #  ref: master

  - repository: puma_web
    type: github
    endpoint: puma_gh_deployment
    name: OllyButters/puma
    ref: gh-pages



#########################################################################################
# Don't start a run when code is committed. You can do this manually in Azure. 
trigger: none


#########################################################################################
# Do run on a schedule though.
schedules:
  - cron: "32 1 * * *"
    displayName: Nightly build
    branches:
     include:
      - master
    always: true


jobs:
- job: RUN_PUMA
  timeoutInMinutes: 120
  pool:
    vmImage: 'Ubuntu 20.04'
  strategy:
    matrix:
      ALSPAC:
        config_file_name: 'config_ALSPAC.ini_master'
        html_output_dir: 'alspac'
      #HDRUK:
      #  config_file_name: 'config_HDRUK.ini'
      #  html_output_dir: 'hdruk'
    maxParallel: 2

  steps:
    #####################################################################################
    # Checkout the source code to a subfolder.
    # This may give an error in the logs like:
    # [warning]Unable move and reuse existing repository to required location
    # This is an Azure bug - https://github.com/microsoft/azure-pipelines-yaml/issues/403
  - checkout: self
    path: 'puma'

  - checkout: puma_configs
    path: 'configs'

  - checkout: puma_web
    path: 'web'
    persistCredentials: true



    #####################################################################################
    # Install all the Python dependencies from the requirements.txt file.
  - bash: |

      cd source
      sudo -H pip3 install -r requirements.txt
  
    workingDirectory: $(Pipeline.Workspace)/puma
    displayName: 'Install Python deps'
    condition: succeeded()



    #####################################################################################
    # Soft link to the config file from the configs repo, then run the code. The pipeline
    # assumes config.ini if no name specified.
  - bash: |

      cd config
      ln -s $(Pipeline.Workspace)/configs/$(config_file_name) config.ini

      cd ../source
      sudo ./papers.py

    workingDirectory: $(Pipeline.Workspace)/puma
    displayName: 'Run the pipeline'
    condition: succeeded()


    #####################################################################################
    # Output the log file for debug
  - bash: |
      
      ls

      cat *.log
      
    workingDirectory: $(Pipeline.Workspace)/puma/logs
    displayName: 'Print logfile'
    condition: always()


    #####################################################################################
    # Commit the generated HTML files to the puma_web repo. This makes them available
    # (after some caching time) at https://ollybutters.github.io/puma_web
  - bash: |

      # Copy the html files to outside of the file tree as they will get trashed on checking out the gh-pages branch
      #mkdir $(Pipeline.Workspace)/temp_html
      #mv $(Pipeline.Workspace)/puma/html/$(html_output_dir) $(Pipeline.Workspace)/temp_html/

      # Git needs some config set to be able to push to a repo. 
      git config --global user.email "you@example.com"
      git config --global user.name "Azure pipeline"
      
      # Checkout the gh-pages branch - this will trash everything here
      git checkout gh-pages    
      git pull

      cp -r $(Pipeline.Workspace)/puma/html/$(html_output_dir) .

      git add .
      git commit -m "Automatically updating web files for $(html_output_dir)"
      git push

    workingDirectory: $(Pipeline.Workspace)/web
    displayName: 'Commit web files'
    condition: succeeded()





    #####################################################################################
    # Output some diagnostics in case something went wrong.
  - bash: |

      echo -e "\n#############################"
      echo -e "python /: ######################"
      python3 --version

      echo -e "\n#############################"
      echo -e "python modules/: ######################"
      pip3 freeze

      echo -e "\n#############################"
      echo -e "ls /: ######################"
      ls $(Pipeline.Workspace)
    
      echo -e "\n#############################"
      echo -e "lscpu: ######################"
      lscpu
      
      echo -e "\n#############################"
      echo -e "memory: #####################"
      free -m
      
      echo -e "\n#############################"
      echo -e "env: ########################"
      env

      sudo apt install tree -y
      pwd
      echo -e "\n#############################"
      echo -e "File tree: ##################"
      tree $(Pipeline.Workspace)

    displayName: 'Diagnostics'
    condition: always()
